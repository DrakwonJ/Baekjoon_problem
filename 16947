#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
int N;
bool cycle;
vector <int> station[3001];
bool cycle_station[3001];
bool visited[3001];
vector <int> answer;

int bfs(int n){
	memset(visited,false,sizeof(visited));
	queue <pair<int,int>> que;
	que.push(make_pair(n,0));
	visited[n] = true;
	while(!que.empty()){
		int cur = que.front().first;
		int cnt = que.front().second;
		que.pop();
		
		if(cycle_station[cur])
			return cnt;
		
		for(int i=0;i<station[cur].size();i++){
			int next = station[cur][i];
			if(visited[next] == false){
				visited[next] = true;
				que.push(make_pair(next,cnt+1));
			}
		}
	}
}

void dfs(int cur, int start, int cnt){
	if(cur == start && cnt >=2){
		cycle = true;
		return;
	}
	
	visited[cur] = true;
	
	for(int i=0;i<station[cur].size();i++){
		int next = station[cur][i];
		if(visited[next] == false)
			dfs(next,start,cnt+1);
		else{
			if(next == start && cnt>=2){
				dfs(next,start,cnt);
			}
		}
		
		if(cycle == true)
			return;
	}
}

void solve(){
	for(int i=1;i<=N;i++){
		memset(visited,false,sizeof(visited));
		cycle = false;
		int start = i;
		dfs(i,start,0);
		if(cycle == true)
			cycle_station[i] = true;
	}
	for(int i=1;i<=N;i++){
		if(cycle_station[i] == true){
			answer.push_back(0);
			continue;
		}
		answer.push_back(bfs(i));
	}

}

int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
	cin>>N;
	for(int i=0;i<N;i++){
		int a,b;
		cin>>a>>b;
		station[a].push_back(b);
		station[b].push_back(a);
	}
	solve();
	for(int i=0;i<answer.size();i++)
		cout<<answer[i]<<" ";
	cout<<endl;
}
