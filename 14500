#include <iostream>
#include <algorithm>
using namespace std;

int get_max( int n, int m, int (*matrix)[500], double (*visit)[500], 
			int be_x, int be_y, int x, int y, int sum, int time){
	int case1 = 0, case2 = 0, case3 = 0, case4 = 0;
	for(int i=1;i<=time;i++){
		if(visit[i][i] == 1000*x+y)
			return 0;
	}	
	if(time >= 4){
		return sum;
	}
	else if((n-1<x) || (x<0) || (m-1<y) || (y<0)){
		return 0;
	}
	else if((time >= 1) && (x == be_x) && (y == be_y)){
		return 0;
	}
	else{
		time++;
		visit[time][time] = 1000*x + y;
		sum += matrix[x][y];
		//cout<<x<<", "<<y<<", "<<time<<"sum: "<<sum<<endl;
		case1 = get_max(n, m, matrix, visit, x, y, x+1, y, sum, time);
		case2 = get_max(n, m, matrix, visit, x, y, x-1, y, sum, time);
		case3 = get_max(n, m, matrix, visit, x, y, x, y+1, sum, time);
		case4 = get_max(n, m, matrix, visit, x, y, x, y-1, sum, time);
		int large = case1 < case2?(case2 < case3?case3:case2):
			(case1<case3?case3:case1);
		large = large<case4?case4:large;
		return large;
	}
}

int main(void){
	int n,m;
	int max=0;
	cin>>n>>m;
	int matrix[500][500];
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cin>>matrix[i][j];
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			double visit[500][500];
			int temp = get_max(n,m,matrix,visit,i,j, i, j, 0, 0);
			if(temp >=  max)
				max = temp;
		}
	}
	int temp = 0;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(j+2>m-1 || i-1<0)
				temp = 0;
			else{
				temp = matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i-1][j+1];
				max = temp>max?temp:max;
			}
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(j+2>m-1 || i+1>n-1)
				temp = 0;
			else{
				temp = matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i+1][j+1];
				max = temp>max?temp:max;
			}
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(i+2>n-1 || j+1>m-1)
				temp = 0;
			else{
				temp = matrix[i][j] + matrix[i+1][j] + matrix[i+2][j] +matrix[i+1][j+1];
				max = temp>max?temp:max;
			}
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(i+2>n-1 || j-1<0)
				temp = 0;
			else{
				temp = matrix[i][j] + matrix[i+1][j] + matrix[i+2][j] + matrix[i+1][j-1];
				max = temp>max?temp:max;
			}
		}
	}
	cout<<max;
}
