#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <cstring>
#include <queue>
using namespace std;
typedef struct{
	int pos;
	int time;
}posit;
int N,K;
int arr[100001];
queue <posit> visited;

void search(int cnt){
	while(visited.front().time+1 == cnt){

		if(visited.front().pos * 2 <= 100000 && cnt < arr[visited.front().pos * 2]){
			arr[visited.front().pos*2] = cnt;
			visited.push({visited.front().pos*2,cnt});
		}
		if(visited.front().pos -1 >= 0 && cnt<arr[visited.front().pos - 1]){
			arr[visited.front().pos-1] = cnt;
			visited.push({visited.front().pos-1,cnt});
		}
		if(visited.front().pos+1 <= 100000 && cnt<arr[visited.front().pos+1]){
			arr[visited.front().pos+1] = cnt;
			visited.push({visited.front().pos+1,cnt});
		}
		visited.pop();
	}
}
int main(void){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
	cin>>N>>K;
	int cnt = 1;
	for(int i=0;i<100001;i++)
		arr[i] = 100000;
	visited.push({N,1});
	if(N==K)
		cout<<0<<endl;
	else if(N>K)
		cout<<N-K<<endl;
	else{
		while(arr[K] == 100000){
		cnt++;
		search(cnt);
	}
	cout<<arr[K]-1<<endl;
	}
}
