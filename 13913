#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
int subin,sister;
int before[100001];
bool visited[100001];
vector <int> path;
int BFS(){
	queue<pair<int,int>> q;
	q.push(make_pair(subin,0));
	visited[subin] = true;
	while(!q.empty()){
		int cur = q.front().first;
		int cnt = q.front().second;
		q.pop();
		
		if(cur == sister){
			int n = cur;
			while(n != subin){
				path.push_back(n);
				n = before[n];
			}
		path.push_back(subin);
		return cnt;
		}
		if(cur+1 < 100001 && !visited[cur+1]){
			q.push(make_pair(cur+1,cnt+1));
			visited[cur+1] = true;
			before[cur+1] = cur;
		}
		if(cur - 1 >= 0 && !visited[cur-1]){
			q.push(make_pair(cur-1,cnt+1));
			visited[cur-1] = true;
			before[cur-1] = cur;
		}
		if(cur*2 < 100001 && !visited[cur*2]){
			q.push(make_pair(cur*2,cnt+1));
			visited[cur*2] = true;
			before[cur*2] = cur;
		}
	}
}

int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
	cin>>subin>>sister;
	memset(visited,false,sizeof(visited));
	if(sister<=subin){
		cout<<subin-sister<<"\n";
		cout<<subin<<" ";
		if(sister<subin){
			for(int i=1;i<=subin-sister;i++)
				cout<<subin-i<<" ";
		}
	}
	else{
		int cnt = BFS();
		cout<<cnt<<endl;
		for(int i = path.size() - 1; i>=0; i--)
			cout<<path[i]<<" ";
	}
}
